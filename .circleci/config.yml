version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.11

jobs:
  staging_push_to_ecr:
    machine: true
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run: 
          name: install_gcp_components
          command: |
            sudo apt-get update && sudo apt-get install -y apt-transport-https
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get update
            sudo apt-get install -y kubectl
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            sudo apt-get update && sudo apt-get install google-cloud-sdk
            echo $GCP_SERVICE_ACCOUNT | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project deft-return-160022
            gcloud --quiet config set compute/zone us-central1-a
            gcloud container clusters get-credentials standard-cluster-1 --zone us-central1-a --project deft-return-160022
            kubectl get nodes



  prod_push_to_ecr:
    machine: true
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: build_image
          command: |
            docker build -t "$AWS_ECR_ACCOUNT_URL/prod-hello-world:$CIRCLE_TAG" . 
      - run:
          name: ecr_login
          command: $(aws ecr get-login --no-include-email --region $AWS_REGION)
      - run:
          name: push_image
          command: docker push "$AWS_ECR_ACCOUNT_URL/prod-hello-world:$CIRCLE_TAG"

  tests:
    docker:
      - image: circleci/ruby:2.4.1-jessie
        environment:
          BUNDLE_WITHOUT: production
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          MYSQL_USER: root
          RACK_ENV: development

      - image: tkuchiki/delayed-mysql
        environment:
          MYSQL_ROOT_HOST: "%"
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_DATABASE: circleci

    steps:
      # Get latest code
      - checkout

      # Baseline image from CCI does not have Rails dependencies installed
      - run: 
          name: install_dependencies
          command: sudo apt-get update && sudo apt-get install -y build-essential libpq-dev nodejs

      # Informational in case of errors later
      - run:
          name: which_bundler
          command: bundle -v

      # If cached gems are found from a previous run, get them and use them. 
      - restore_cache:
          keys:
            - hello-world-{{ checksum "Gemfile.lock" }}
            - hello-world-
      
      # Install Gems from Gemfile.
      - run:
          name: bundle_install
          command: bundle check || bundle install

      # Update Gem cache if needed.
      - save_cache:
          key: hello-world-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Wait for the DB container to come online. This command is a builtin for the container
      - run: 
          name: wait_for_db
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s

      # Create baseline DBs as a sanity check. 
      - run:
          name: test_db_connectivity
          command: bundle exec rake db:create

      # Run assets precompile 
      - run: 
          name: assets_precompile
          command: bundle exec rake assets:precompile

      # Run DB Migrate Rake tasks if present
      - run:
          name: db_migrate
          command: bundle exec rake db:migrate

      # Tests passed! Hello world. 
      - run: echo "hello development"

workflows:
  version: 2

  smoke_tests:
    jobs:
      - tests:
          filters:
            branches:
              ignore: /.*/
  
  push_staging:
    jobs:
      - staging_push_to_ecr:
          filters:
            branches:
              only: /.*/

  push_prod:
    jobs:
      - prod_push_to_ecr:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
